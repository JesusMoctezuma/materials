var createScene = function () {
    // This creates a basic Babylon Scene object (non-mesh)
    var scene = new BABYLON.Scene(engine);

    // This creates and positions a free camera (non-mesh)
    const camera = new BABYLON.ArcRotateCamera("Camera", 3 * Math.PI / 4, Math.PI / 4, 200, BABYLON.Vector3.Zero(), scene);
    camera.setTarget(BABYLON.Vector3.Zero());
    camera.attachControl(canvas, true);
    camera.minZ = 0.1;


    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)
    var hemiLight = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);
    hemiLight.intensity = 0.2;
    hemiLight.groundColor = new BABYLON.Color3(0,0,0)

    // Point Light
    const pointLight01 = new BABYLON.PointLight("pointLight01", new BABYLON.Vector3(20, 30, 0), scene);
    pointLight01.intensity = 200;
    const pointLight02 = new BABYLON.PointLight("pointLight01", new BABYLON.Vector3(-20, 30, 0), scene);
    pointLight02.intensity = 200;


    // HDRI
    // Environment Texture
    // const hdrTexture = BABYLON.CubeTexture.CreateFromPrefilteredData("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/HDR_BrownPhotostudio_02.env", scene);
    // const hdrTexture = BABYLON.CubeTexture.CreateFromPrefilteredData("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/HDR_PhotoStudio_01.env", scene);
    const hdrTexture = BABYLON.CubeTexture.CreateFromPrefilteredData("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/HDRI/stuttgart_hillside.env", scene);
    scene.environmentTexture = hdrTexture;
    // Creating a cube1 texture for the HDRI
    // scene.createDefaultSkybox(hdrTexture, true, 8000); 

    // Center Cube.
    var cube1 = BABYLON.MeshBuilder.CreateBox("cube1", {size: 7}, scene);
    cube1.position.x = 20;
    cube1.position.y = 10;

    var cube2 = BABYLON.MeshBuilder.CreateBox("cube2", {size: 7}, scene);
    cube2.position.x = -20;
    cube2.position.y = 10;

    var cube3 = BABYLON.MeshBuilder.CreateBox("cube3", {size: 7}, scene);
    cube3.position.z = -20;
    cube3.position.y = 10;

    var cube4 = BABYLON.Mesh.CreateBox("cube4", 8, scene);
    cube4.position.x = 20;
    cube4.position.y = 10;
    cube4.position.z = -40;


    // Ground shape.
    var ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 90, height: 80}, scene);
    ground.position.y = -4.6;

    // Walls
    var wall01 = BABYLON.MeshBuilder.CreateBox("wall01", {width: 90, height: 30, depth: 0.4 }, scene);
    wall01.position.z = 40;
    wall01.position.y = 10;

    var wall02 = BABYLON.MeshBuilder.CreateBox("wall02", {width: 90, height: 30, depth: 0.4  }, scene);
    wall02.position.z = -40;
    wall02.position.y = 10;

    var wall03 = BABYLON.MeshBuilder.CreateBox("wall03", {width: 80, height: 30, depth: 0.4  }, scene);
    wall03.position.x = 45;
    wall03.position.y = 10;
    wall03.rotation.y = Math.PI / 2;

    var wall04 = BABYLON.MeshBuilder.CreateBox("wall04", {width: 80, height: 30, depth: 0.4  }, scene);
    wall04.position.x = -45;
    wall04.position.y = 10;
    wall04.rotation.y = Math.PI / 2;

    // Assets
    var coolerMesh;
    meshisin2 = BABYLON.SceneLoader.ImportMesh("", "https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Meshes/Appliances/", "wineCoolerMeters.glb", scene, function (newMeshes2) {
    coolerMesh = newMeshes2[0];
    });
    setTimeout(function() {
    coolerMesh.position.x = 0;
    }, 1000);

    var doorMesh;
    meshisin = BABYLON.SceneLoader.ImportMesh("", "https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Meshes/RoomElements/", "DoorWhite.glb", scene, function (newMeshes) {
    doorMesh = newMeshes[0];
    });
    setTimeout(function() {
    doorMesh.position.x = 30;
    doorMesh.position.y = 6;
    doorMesh.position.z = 40;
    }, 1000);

    var windowMesh;
    meshisin = BABYLON.SceneLoader.ImportMesh("", "https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Meshes/RoomElements/", "Window.glb", scene, function (newMeshes3) {
    windowMesh = newMeshes3[0];
    });
    setTimeout(function() {
    windowMesh.position.x = 20;
    windowMesh.position.y = 10;
    windowMesh.position.z = -40;
    }, 1000);

    // Create materials
    const material01 = new BABYLON.PBRMaterial("material01", scene);
    material01.albedoTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/967/T_967AlpineWhiteUltraMatt_D.jpg", scene);
    material01.bumpTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/967/T_967AlpineWhiteUltraMatt_N.jpg", scene);
    material01.metallicTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/967/T_967AlpineWhiteUltraMatt_AO_R_M.jpg", scene);
    material01.useAmbientOcclusionFromMetallicTextureRed = true;
    material01.useRoughnessFromMetallicTextureGreen = true;
    material01.useMetallnessFromMetallicTextureBlue = true;
    material01.invertNormalMapX = true;
    material01.invertNormalMapY = true;
    material01.backFaceCulling = false;
    material01.emissiveIntensity = 30;
    // material01.refractionTexture = hdrTexture;
    // material01.reflectionTexture = hdrTexture;
    
    const material02 = new BABYLON.PBRMaterial("material02", scene);
    material02.albedoTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Materials/ConcreteAsphalt/ConcreteWhite/T_ConcreteWhite_D.jpg", scene);
    material02.bumpTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Materials/ConcreteAsphalt/ConcreteWhite/T_ConcreteWhite_N.jpg", scene);
    material02.metallicTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Materials/ConcreteAsphalt/ConcreteWhite/T_ConcreteWhite_AO_R_M.jpg", scene);
    material02.useAmbientOcclusionFromMetallicTextureRed = true;
    material02.useRoughnessFromMetallicTextureGreen = true;
    material02.useMetallnessFromMetallicTextureBlue = true;
    material02.invertNormalMapX = true;
    material02.invertNormalMapY = true;
    material02.backFaceCulling = false;
    material02.emissiveIntensity = 30;
    material02.albedoTexture.uScale = 5.5;
    material02.albedoTexture.vScale = 1.8;
    material02.bumpTexture.uScale = 5.5;
    material02.bumpTexture.vScale = 1.8;
    material02.metallicTexture.uScale = 5.5;
    material02.metallicTexture.vScale = 1.8;


    const material03 = new BABYLON.PBRMaterial("material03", scene);
    material03.albedoTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Materials/Wood/WoodFloorClear/T_WoodFloorClear_D.jpg", scene);
    material03.bumpTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Materials/Wood/WoodFloorClear/T_WoodFloorClear_N.jpg", scene);
    material03.metallicTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Materials/Wood/WoodFloorClear/T_WoodFloorClear_AO_R_M.jpg", scene);
    material03.useAmbientOcclusionFromMetallicTextureRed = true;
    material03.useRoughnessFromMetallicTextureGreen = true;
    material03.useMetallnessFromMetallicTextureBlue = true;
    material03.invertNormalMapX = true;
    material03.invertNormalMapY = true;
    material03.backFaceCulling = false;
    material03.emissiveIntensity = 30;
    material03.albedoTexture.uScale = 4;
    material03.albedoTexture.vScale = 3;
    material03.bumpTexture.uScale = 4;
    material03.bumpTexture.vScale = 3;
    material03.metallicTexture.uScale = 4;
    material03.metallicTexture.vScale = 3;
    material03.roughness = 0.3;
    // material03.refractionTexture = hdrTexture
    material03.reflectionTexture = hdrTexture;
    // mainMaterial.realTimeFiltering = true;

    const material04 = new BABYLON.PBRMaterial("material04", scene);
    material04.albedoTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Materials/Front/964/T_964MineralGreenUltraMatt_D.jpg", scene);
    material04.bumpTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Materials/Front/964/T_964MineralGreenUltraMatt_N.jpg", scene);
    material04.metallicTexture = new BABYLON.Texture("https://raw.githubusercontent.com/JesusMoctezuma/materials/master/Materials/Front/964/T_964MineralGreenUltraMatt_AO_R_M.jpg", scene);
    material04.useAmbientOcclusionFromMetallicTextureRed = true;
    material04.useRoughnessFromMetallicTextureGreen = true;
    material04.useMetallnessFromMetallicTextureBlue = true;
    material04.invertNormalMapX = true;
    material04.invertNormalMapY = true;
    material04.backFaceCulling = false;
    material04.emissiveIntensity = 30;
    material04.roughness = 0;
    // material04.refractionTexture = hdrTexture;
    material04.reflectionTexture = hdrTexture;

    // Standard Materials
    var material00 = new BABYLON.StandardMaterial("mat0", scene);
    material00.alpha = 0.0;

    cube1.material = material01;
    cube3.material = material04;
    wall01.material = material02;
    wall02.material = material00;
    wall03.material = material02;
    wall04.material = material02;
    ground.material = material03;
    

    cube4.material = material00;

    // Substraction
    var cube4CSG = BABYLON.CSG.FromMesh(cube4);
    var wall02CSG = BABYLON.CSG.FromMesh(wall02);

    var subCSG = wall02CSG.subtract(cube4CSG);
    var newCSGMesh = subCSG.toMesh("csg", material02, scene);
    // newCSGMesh.position = new BABYLON.Vector3(0, 0, 0);

    // Create default pipeline
    var defaultPipeline = new BABYLON.DefaultRenderingPipeline("default", true, scene, [camera]);
    var curve = new BABYLON.ColorCurves();
    curve.globalHue = 200;
    curve.globalDensity = 80;
    curve.globalSaturation = 100;
    curve.highlightsHue = 20;
    curve.highlightsDensity = 80;
    curve.highlightsSaturation = -80;
    curve.shadowsHue = 2;
    curve.shadowsDensity = 80;
    curve.shadowsSaturation = 40;
    defaultPipeline.imageProcessing.colorCurves = curve;
    defaultPipeline.depthOfField.focalLength = 150;


    // Shadows
    var shadowGenerator = new BABYLON.ShadowGenerator(1024, pointLight01);
    shadowGenerator.addShadowCaster(cube1);
    // shadowGenerator.bias = 0.0001;
	shadowGenerator.useExponentialShadowMap = true;
    ground.receiveShadows = true;
    var shadowGenerator = new BABYLON.ShadowGenerator(1024, pointLight02);
    shadowGenerator.addShadowCaster(cube1);
	shadowGenerator.useExponentialShadowMap = true;
    ground.receiveShadows = true;

    return scene;
};